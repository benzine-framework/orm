<?php

namespace {{ namespace }}\Collections\Base;

use Benzine\ORM\Abstracts;
use Benzine\ORM\Interfaces;
use Benzine\ORM\Exception;
use {{ namespace }}\Models;
use Laminas\Db\ResultSet\ResultSetInterface;

{% include '_overwrite_warning.twig' %}

abstract class AbstractBase{{ class_name }}Collection
    extends Abstracts\AbstractCollection
    implements Interfaces\CollectionsInterface,
               \IteratorAggregate,
               \ArrayAccess,
               \Serializable,
               \Countable
{

{% for column in columns %}
    public function getAll{{ column.getPropertyFunction|pluralize }}() : \Generator
    {
        foreach($this->contained as $contained){
            yield $contained->get{{ column.getPropertyFunction }}();
        }
    }

    public function setAll{{ column.getPropertyFunction|pluralize }}({{ column.phptype }} ${{ column.getFieldSanitised }} = null) : self
    {
        foreach($this->contained as $contained){
            $contained->set{{ column.getPropertyFunction }}(${{ column.getFieldSanitised }});
        }

        return $this;
    }

{% endfor %}

    public function fromResultSet(ResultSetInterface $resultSet) : AbstractBase{{ class_name }}Collection
    {
        foreach($resultSet as $result){
            if(!$result instanceof Models\{{ class_name }}Model){
                throw new Exception\CollectionException(sprintf(
                    "Creating a collection of {{ class_name }}Model, but somehow got given a %s",
                    get_class($result)
                ));
            }
            $this->contained[] = $result;
        }

        return $this;
    }

    public function offsetGet($offset) : Models\{{ class_name }}Model
    {
        return $this->contained[$offset];
    }

    public function offsetSet($offset, $value) : void
    {
        if(!$value instanceof Models\{{ class_name }}Model){
            throw new Exception\CollectionException(sprintf(
                "Creating a collection of {{ class_name }}Model, but somehow got given a %s",
                get_class($value)
            ));
        }

        $this->contained[$offset] = $value;
    }
}