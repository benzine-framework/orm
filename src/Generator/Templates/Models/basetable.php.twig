<?php

namespace {{ namespace }}\TableGateways\Base;

use {{ namespace }}\Models;
use {{ namespace }}\TableGateways;
use Faker\Generator;
use Laminas\Db\ResultSet\ResultSet;
use Benzine\ORM\Abstracts\AbstractModel;
use Benzine\ORM\Abstracts\AbstractTableGateway;
use Benzine\ORM\Connection;
use Benzine\ORM\Interfaces\TableGatewayInterface as TableGatewayInterface;
use Benzine\Exceptions\BenzineException;
use Carbon\Carbon;

{% include '_overwrite_warning.twig' %}

abstract class AbstractBase{{ class_name }}TableGateway extends AbstractTableGateway implements TableGatewayInterface
{
    protected $table = '{{ table }}';
    protected string $model = Models\{{ class_name }}Model::class;
    protected Generator $faker;
    protected Connection\Databases $databaseConnection;
    protected Connection\Database $database;

{% for related_object in related_objects_shared|sort|unique %}
    protected TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway;

{% endfor %}
    /**
     * AbstractTableGateway constructor.
     *
{% for related_object in related_objects_shared|sort|unique %}
     * @param TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway,
{% endfor %}
     * @param Generator $faker
     * @param Connection\Databases  $databaseConnection
     *
     * @throws BenzineException
     */
    public function __construct(
{% for related_object in related_objects_shared|sort|unique %}
        {% if related_object.getRemoteClass != class_name %}
        TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway,
        {% endif %}
{% endfor %}
        Generator $faker,
        Connection\Databases $databaseConnection
    ) {
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
        $this->{{ related_object.getRemoteVariable }}TableGateway = ${{ related_object.getRemoteVariable }}TableGateway;
{% else %}
        $this->{{ related_object.getRemoteVariable }}TableGateway = $this;
{% endif %}
{% endfor %}
        $this->faker = $faker;
        $this->databaseConnection = $databaseConnection;
        $this->database = $this->databaseConnection->getDatabase('{{ database }}');

        $resultSetPrototype = new ResultSet(ResultSet::TYPE_ARRAYOBJECT, new $this->model());

        parent::__construct($this->table, $this->database->getAdapter(), null, $resultSetPrototype);
    }

    public function getNewMockModelInstance() : Models\{{ class_name }}Model
    {
{% for column in columns|sort %}
{% if column.hasRelatedObjects %}
        // Generate a Random {{ column.getRelatedObjects()[0].getRemoteClass|singularize }}.
        $random{{ column.getRelatedObjects()[0].getRemoteClass }} = $this->{{ column.getRelatedObjects()[0].getRemoteVariable }}TableGateway->fetchRandom();

{% endif %}
{% if column.getDbType == 'json' %}
        // Generate an array of lastnames to make a filler json array.
        ${{ column.getField }}Array = [];
        for($i = 0; $i < $this->faker->numberBetween(1,10); $i++) {
            ${{ column.getField }}Array[] = $this->faker->lastName;
        }

{% endif %}
{% endfor %}
        return $this->getNewModelInstance([
{% for column in columns|sort %}
            // {{ column.getField }}. Type = {{ column.getDbType }}. PHPType = {{ column.getPhpType }}. {% if(column.hasRelatedObjects) %}Has{% else %}Has no{% endif %} related objects. Default is {% if(column.isDefaultValueIsLiteral) %}literal{% else %}interpreted{% endif %} {{ column.getDefaultValue ? column.getDefaultValue : "null" }}
{% if column.isAutoIncrement %}
{% elseif column.hasRelatedObjects %}
{% if class_name|capitalize != column.getRelatedObjects()[0].getRemoteVariable|capitalize %}
{% if column.isUnique == false %}
            '{{ column.getField }}' =>
                $random{{ column.getRelatedObjects()[0].getRemoteClass }} instanceof Models\{{ column.getRelatedObjects()[0].getRemoteClass }}Model
                    ? $this->{{ column.getRelatedObjects()[0].getRemoteVariable }}TableGateway->fetchRandom()->{{ column.getRelatedObjects()[0].getRemoteBoundColumnGetter }}()
                    : $this->{{ column.getRelatedObjects()[0].getRemoteVariable }}TableGateway->getNewMockModelInstance()->save()->{{ column.getRelatedObjects()[0].getRemoteBoundColumnGetter }}(),
{% else %}
            '{{ column.getField }}' => $this->{{ column.getRelatedObjects()[0].getRemoteVariable }}TableGateway->getNewMockModelInstance()->save()->{{ column.getRelatedObjects()[0].getRemoteBoundColumnGetter }}(),
{% endif %}
{% else %}
            '{{ column.getField }}' => null, // This is a circular reference - We'd just be creating elements for eternity if we don't stop the madness.
{% endif %}
{% elseif column.getPhpType == '\\Carbon\\Carbon' %}
            '{{ column.getField }}' => new Carbon($this->faker->dateTime),
{% elseif column.getPhpType == 'int' and 'max_field_length' in column|keys %}
            '{{ column.getField }}' => $this->faker->numberBetween(1, {{ 10 ** (column.getMaxLength - 1) < column.getMaxFieldLength ? 10 ** (column.getMaxLength - 1) : column.getMaxFieldLength}}),
{% elseif column.getPhpType == 'int' %}
            '{{ column.getField }}' => $this->faker->numberBetween(1, {{ 10 ** (column.getMaxLength - 2) }}),
{% elseif column.getDbType == 'enum' and column.getPhpType == 'string' %}
            '{{ column.getField }}' => '{{ column.getPermittedValues()[0] }}',
{% elseif (column.getDbType == 'datetime' or column.getDbType == 'timestamp') and column.getPhpType == 'string' %}
            '{{ column.getField }}' => $this->faker->dateTime()->format("Y-m-d H:i:s"), // @todo: Make datetime fields accept DateTime objects instead of strings. - MB
{% elseif column.getPhpType == 'float' %}
            '{{ column.getField }}' => $this->faker->randomFloat({{ column.getMaxDecimalPlaces }}, {{ column.isUnsigned ? 0 : -5 }}, 5),
{% elseif column.getMaxLength %}
            '{{ column.getField }}' => substr($this->faker->text({{ max(5,min(column.getMaxLength,500)) }}), 0, {{ min(column.getMaxLength,500) }}),
{% elseif column.getDbType == 'json' %}
            '{{ column.getField }}' => json_encode(${{ column.getField }}Array, JSON_PRETTY_PRINT),
{% else %}
            '{{ column.getField }}' => $this->faker->word,
{% endif %}
{% endfor %}
        ]);
    }

    /**
     * @param array<string,mixed> $data
     *
     * @return Models\{{ class_name }}Model
     */
    public function getNewModelInstance(array $data = []): Models\{{ class_name }}Model
    {
        return parent::getNewModelInstance($data);
    }

    /**
     * @param Models\{{ class_name }}Model $model
     *
     * @return Models\{{ class_name }}Model
     */
    public function save(AbstractModel $model): Models\{{ class_name }}Model
    {
        return parent::save($model);
    }

    /**
     * @return null|Models\{{ class_name }}Model
     * @throws BenzineException
     */
    public function fetchRandom() : ?Models\{{ class_name }}Model
    {
        return parent::fetchRandom();
    }
}
