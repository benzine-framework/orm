<?php

namespace {{ namespace }}\Models\Base;

use {{ namespace }}\Models;
use {{ namespace }}\TableGateways;
use {{ namespace }}\Services;
use DI\NotFoundException;
use Benzine\ORM\Abstracts\AbstractModel;
use Benzine\ORM\Interfaces\ModelInterface as ModelInterface;
use Benzine\App as App;
use Carbon\Carbon as DateTime;

{% include '_overwrite_warning.twig' %}
{% set existingMethods = [] %}

abstract class AbstractBase{{ class_name }}Model extends AbstractModel implements ModelInterface
{
    // Declare what fields are available on this object
{% for column in columns %}
    public const FIELD_{{ column.getFieldSanitised|upper }} = '{{ column.getDbField }}';
{% endfor %}

{% for column in columns %}
    public const TYPE_{{ column.getFieldSanitised|upper }} = '{{ column.getDbType }}';
{% endfor %}

    // Constant arrays defined by ENUMs
{% for column in columns %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
    public const OPTIONS_{{ column.getFieldSanitised|upper }} = ["{{ column.getPermittedValues | join('", "') | raw }}"];
{% endif %}
{% endfor %}

    // Constants defined by ENUMs
{% for column in columns %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
{% for permittedValue in column.getPermittedValues %}
    public const {{ column.getFieldSanitised|upper }}_{{ permittedValue|upper|replace({'-':'_'}) }} = '{{ permittedValue }}';
{% endfor %}
{% endif %}
{% endfor %}

{% if primary_keys %}
    protected array $_primary_keys = [
{% for command, database in primary_keys %}
        '{{ command }}' => '{{ database }}',
{% endfor %}
    ];

{% endif %}
{% if autoincrement_keys %}
    protected array $_autoincrement_keys = [
{% for command, database in autoincrement_keys %}
        '{{ command }}' => '{{ database }}',
{% endfor %}
    ];

{% endif %}
{% for column in columns %}
    // PHPType: {{ column.getPhpType }}. DBType: {{ column.getDbType }}.
{% if column.getMaxFieldLength %}
    // Max Length: {{ column.getMaxFieldLength }}.
{% endif %}
{% if column.default_value %}
    protected ?{{ column.getPhpType }} ${{ column.getFieldSanitised }} = '{{ column.default_value }}';
{% else %}
    protected ?{{ column.getPhpType }} ${{ column.getFieldSanitised }} = null;
{% endif %}

{% endfor %}

{% for related_object in related_objects %}
    private Services\{{ related_object.getRemoteClass }}Service ${{ related_object.getRemoteVariable }}Service;
{% endfor %}
{% for remote_object in remote_objects %}
{% if remote_object.getLocalClass != class_name %}
{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
    private Services\{{ remote_object.getLocalClass }}Service ${{ remote_object.getLocalVariable }}Service;
{% endif %}
{% endif %}
{% endfor %}

    // Caching entities
{% for related_object in related_objects %}
    protected ?Models\{{ related_object.getRemoteClass }}Model $cached{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object;
{% endfor %}
{% for remote_object in remote_objects %}
{% if remote_object.getLocalClass != class_name %}
{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
    protected ?Models\{{ remote_object.getLocalClass }}Model $cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object;
    /** @var Models\{{ remote_object.getLocalClass }}Model[] */
    protected array $cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects = [];
{% endif %}
{% endif %}
{% endfor %}

{% for related_object in related_objects %}
    /**
     * Lazy loading function to get an instance of Services\{{ related_object.getLocalClass }}Service
     *
     * @return Services\{{ related_object.getRemoteClass }}Service
     */
    protected function get{{ related_object.getRemoteClass }}Service() : Services\{{ related_object.getRemoteClass }}Service
    {
        if (!isset($this->{{ related_object.getRemoteVariable }}Service)){
            $this->{{ related_object.getRemoteVariable }}Service = App::DI(Services\{{ related_object.getRemoteClass }}Service::class);
        }

        return $this->{{ related_object.getRemoteVariable }}Service;
    }
{% endfor %}

{% for remote_object in remote_objects %}
{% if remote_object.getLocalClass != class_name %}
{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
    /**
     * Lazy loading function to get an instance of Services\{{ remote_object.getLocalClass }}Service
     *
     * @return Services\{{ remote_object.getLocalClass }}Service
     */
    protected function get{{ remote_object.getLocalClass }}Service() : Services\{{ remote_object.getLocalClass }}Service
    {
        if (!isset($this->{{ remote_object.getLocalVariable }}Service)){
            $this->{{ remote_object.getLocalVariable }}Service = App::DI(Services\{{ remote_object.getLocalClass }}Service::class);
        }

        return $this->{{ remote_object.getLocalVariable }}Service;
    }
{% endif %}
{% endif %}
{% endfor %}

    /**
     * @param array $data an array of a Models\{{ class_name }}Model's properties
     *
     * @return Models\{{ class_name }}Model
     */
    public static function factory(array $data = [])
    {
        return parent::factory($data);
    }

    /**
     * Returns an array describing the properties of this model.
     *
     * @return array
     */
    public function getPropertyMeta(): array
    {
{% for column in columns %}
{% if column.hasRelatedObjects %}
        /** @var Services\{{ column.getField|replace({"Id":""})|pluralize|transform_camel_to_studly }}Service ${{ column.getField|replace({"Id":""})|pluralize }}Service */
        ${{ column.getField|replace({"Id":""})|pluralize }}Service = App::DI(Services\{{ column.getField|replace({"Id":""})|pluralize|transform_camel_to_studly }}Service::class);
{% endif %}
{% endfor %}

        return [
{% for column in columns %}
            self::FIELD_{{ column.getFieldSanitised|upper }} => [
                'type' => self::TYPE_{{ column.getFieldSanitised|upper }},
{% if column.getMaxLength > 0 %}
                'length' => {{ column.getMaxLength }},
{% endif %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
                'options' => self::OPTIONS_{{ column.getFieldSanitised|upper }},
{% if column.getDefaultvalue %}
                'default' => '{{ column.getDefaultValue() }}',
{% endif %}
{% endif %}
{% if column.hasRelatedObjects %}
                'service' => ${{ column.getField|replace({"Id":""})|pluralize }}Service,
                'remoteOptionsLoader' => function() use (${{ column.getField|replace({"Id":""})|pluralize }}Service){
                    return ${{ column.getField|replace({"Id":""})|pluralize }}Service->getAll();
                },
{% endif %}
            ],
{% endfor %}
        ];
    }

{% for column in columns %}
    public function get{{ column.getPropertyFunction }}(){{ column.phptype ?  ": ?" ~  column.phptype }}
    {
        return $this->{{ column.getFieldSanitised }};
    }

    /**
     * @param {{ column.phptype }}|null ${{ column.getFieldSanitised }}
     *
     * @return Models\{{ class_name }}Model
     */
    public function set{{ column.getPropertyFunction }}({{ column.phptype }} ${{ column.getFieldSanitised }} = null): self
    {
        $this->{{ column.getFieldSanitised }} = ${{ column.getFieldSanitised }};

        return $this;
    }

{% endfor %}
{% for related_object in related_objects %}
    public function set{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}(
        Models\{{ related_object.getRemoteModelName }} ${{ related_object.getRemoteVariable|singularize }}
    ) : self
    {
        return $this->{{ related_object.getLocalBoundColumnSetter }}(${{ related_object.getRemoteVariable|singularize }}->{{ related_object.getRemoteBoundColumnGetter }}());
    }

{% endfor %}
{% if remote_objects %}
{% for remote_object in remote_objects %}
    public function set{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}(
        Models\{{ remote_object.getRemoteModelName }}Model ${{ remote_object.getRemoteVariable|singularize }}
    ) : self {
        return $this->{{ remote_object.getLocalBoundColumnSetter }}(${{ remote_object.getRemoteVariable|singularize }}->{{ remote_object.getRemoteBoundColumnGetter }}());
    }

{% endfor %}
{% endif %}
{% for related_object in related_objects %}
    /**
     * @throws NotFoundException
     */
{% if related_object.getRemoteFunctionName != class_name %}
    public function fetch{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object(): ?Models\{{ related_object.getRemoteClass }}Model
{% else %}
    public function fetchRelated{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object(): ?Models\{{ related_object.getRemoteClass }}Model
{% endif %}
    {
        if (!isset($this->cached{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object)){
            $this->cached{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object = $this->get{{ related_object.getRemoteVariable|transform_camel_to_studly }}Service()
                    ->getByField('{{ related_object.getRemoteBoundColumn }}', $this->{{ related_object.getLocalBoundColumnGetter }}());
        }
        return $this->cached{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object;
    }

{% endfor %}
{% if remote_objects %}
{% for remote_object in remote_objects %}
{% if remote_object.getLocalClass != class_name %}
{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
{% set existingMethods = existingMethods|merge([ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly ]) %}

    /**
     * Fetch a singular {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that references this Models\{{ class_name }}Model.
     *
     * Local class: {{ remote_object.getLocalClass }}
     * Remote class: {{ remote_object.getRemoteClass }}
     *
     * @param null|string $orderBy Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param null|string $orderDirection Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @return Models\{{ remote_object.getLocalClass }}Model|null
     *
     * @throws NotFoundException
     */
    public function fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object(
{% if remote_object.local_model_key != 'id' %}
        $orderBy = null,
        $orderDirection='ASC'
{% endif %}
    ): ?Models\{{ remote_object.getLocalClass }}Model {
{% if remote_object.local_model_key != 'id' %}
        // Determine if this lookup is cacheable.
        $isCacheable = false;
        if(!$orderBy && $orderDirection == 'ASC'){
            $isCacheable = true;
        }
{% else %}
        $isCacheable = true;
{% endif %}

        // If it is cacheable, and there is something in the cache, return it
        if($isCacheable && isset($this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object)) {
            return $this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object;
        }

{% if remote_object.local_model_key == 'id' %}
        $result = $this->get{{ remote_object.getLocalClass }}Service()
                ->getById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        $result = $this->get{{ remote_object.getLocalClass }}Service()
                ->getByField(
                    Models\{{ class_name }}Model::{{ remote_object.getRemoteBoundColumnAsConstant }},
                    $this->{{ remote_object.getRemoteBoundColumnGetter }}(),
                    $orderBy,
                    $orderDirection
                );
{% endif %}

        // If its cacheable, cache our $result.
        if ($isCacheable && $result) {
            $this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object = $result;
        }

        return $result;
    }

    /**
     * Fetch all matching {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that reference this Models\{{ class_name }}Model.
     *
     * Local class: {{ remote_object.getLocalClass }}
     * Remote class: {{ remote_object.getRemoteClass }}
     *
     * @param null|int $limit Maximum number of {{ remote_object.getLocalClass }}Model to fetch
     * @param null|int $offset Number of {{ remote_object.getLocalClass }}Models to offset the fetch by
     * @param null|string $orderBy Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param string $orderDirection Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @return Models\{{ remote_object.getLocalClass }}Model[]|null
     *
     * @throws NotFoundException
     */
    public function fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects(
        int $limit = null,
        int $offset = null,
        string $orderBy = null,
        string $orderDirection='ASC'
    ): ?array {
        // Determine if this lookup is cacheable.
        $isCacheable = false;
        if (!$limit && !$offset && !$orderBy && $orderDirection = 'ASC'){
            $isCacheable = true;
        }

        // If it is cacheable, and there is something in the cache, return it
        if ($isCacheable && count($this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects) > 0){
            return $this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects;
        }

        $result = $this->get{{ remote_object.getLocalClass }}Service()
                            ->getManyByField(
                                Models\{{ remote_object.getLocalClass }}Model::{{ remote_object.getLocalBoundColumnAsConstant }},
                                $this->{{ remote_object.getRemoteBoundColumnGetter }}(),
                                $limit,
                                $offset,
                                $orderBy,
                                $orderDirection
                            );

        // If its cacheable, cache our $result.
        if ($isCacheable && $result) {
            $this->cached{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects = $result;
        }

        return $result;
    }

    /**
     * Count the number of matching {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that reference this Models\{{ class_name }}Model.
     * Returns the number of objects found.
     *
     * @throws NotFoundException
     */
    public function count{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects(): int {
        return $this
            ->get{{ remote_object.getLocalClass }}Service()
                ->countByField(
                    Models\{{ class_name }}Model::{{ remote_object.getRemoteBoundColumnAsConstant }},
                    $this->{{ remote_object.getRemoteBoundColumnGetter }}()
                );
    }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
    /**
     * @throws NotFoundException
     */
    public function save(): Models\{{ class_name }}Model
    {
        /** @var TableGateways\{{ class_name }}TableGateway $tableGateway */
        $tableGateway = App::DI(TableGateways\{{ class_name }}TableGateway::class);

        return $tableGateway->save($this);
    }

    /**
     * Destroy the current record.
     * Returns the number of affected rows.
     *
     * @throws NotFoundException
     */
    public function destroy(): int
    {
        /** @var TableGateways\{{ class_name }}TableGateway $tableGateway */
        $tableGateway = App::DI(TableGateways\{{ class_name }}TableGateway::class);

        return $tableGateway->delete($this->getPrimaryKeys_dbColumns());
    }

    /**
     * Destroy the current record, and any dependencies upon it, recursively.
     * Returns the number of affected rows.
     *
     * @throws NotFoundException
     */
    public function destroyRecursively(): int
    {
{% if remote_objects.length > 0 %}
        $countOfThingsDestroyed = 0;
        $thingsToDestroy = [];
{% for remote_object in remote_objects %}
        ${{ remote_object.getLocalFunctionName }}Objects = $this->fetch{{ remote_object.getLocalFunctionName }}Objects();
        if ( is_array(${{ remote_object.getLocalFunctionName }}Objects) ) {
            $thingsToDestroy = array_merge($thingsToDestroy, ${{ remote_object.getLocalFunctionName }}Objects);
        }
{% endfor %}
        if (count($thingsToDestroy) > 0){
            foreach($thingsToDestroy as $thingToDestroy){
                /** @var $thingToDestroy ModelInterface */
                $countOfThingsDestroyed+= $thingToDestroy->destroyRecursively();
            }
        }
        $this->destroy();
        $countOfThingsDestroyed++;
        return $countOfThingsDestroyed;
{% else %}
        return $this->destroy();
{% endif %}
    }

    /**
     * Provides an array of all properties in this model.
     *
     * @return string[]
     */
    public function getListOfProperties(): array
    {
        return [
{% for column in columns %}
            '{{ column.getDbField }}' => '{{ column.getFieldSanitised }}',
{% endfor %}
        ];
    }

    /**
     * Take an input array $data, and turn that array into a hydrated object.
     *
     * @param array $data dehydated object array
     *
     * @return Models\{{ class_name }}Model
     */
    public function exchangeArray(array $data): Models\{{ class_name }}Model
    {
        $this->__pre_load();
{% for column in columns %}
        ${{ column.getDbField() }} = $data['{{ column.getDbFieldOptions|join("'] ?? $data['")|raw }}'] ?? null;
{% endfor %}

{% for column in columns %}
{% if column.getDbType == 'timestamp' %}
        $this->{{ column.getFieldSanitised }} =
                ${{ column.getDbField() }} !== null
                    ? DateTime::createFromFormat("Y-m-d H:i:s", ${{ column.getDbField() }})
                    : null ;
{% else %}
        $this->{{ column.getFieldSanitised }} = ${{ column.getDbField() }};
{% endif %}
{% endfor %}

        $this->__post_load();

        return $this;
    }

}
