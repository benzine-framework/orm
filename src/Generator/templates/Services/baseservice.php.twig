<?php

namespace {{ namespace }}\Services\Base;

use {{ namespace }}\Models;
use {{ namespace }}\TableGateways;
use Laminas\Db\Sql\Expression;
use Laminas\Db\Sql\Select;
use Laminas\Db\Sql\Predicate;
use Laminas\Db\Sql\Where;
use Benzine\ORM\Abstracts\AbstractService;
use Benzine\ORM\Interfaces\ServiceInterface as ServiceInterface;

{% include '_overwrite_warning.twig' %}

abstract class AbstractBase{{ class_name }}Service extends AbstractService implements ServiceInterface
{
    // Related Objects Table Gateways
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
    protected TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway;
{% endif %}
{% endfor %}

    // Remote Constraints Table Gateways
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
    protected TableGateways\{{ remote_constraint.getLocalClass }}TableGateway ${{ remote_constraint.getLocalVariable }}TableGateway;
{% endif %}
{% endfor %}

    // Self Table Gateway
    protected TableGateways\{{ class_name }}TableGateway ${{ variable_name }}TableGateway;

    /**
     * Constructor.
     *
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
     * @param TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
     * @param TableGateways\{{ remote_constraint.getLocalClass }}TableGateway ${{ remote_constraint.getLocalVariable }}TableGateway
{% endif %}
{% endfor %}
     * @param TableGateways\{{ class_name }}TableGateway ${{ variable_name }}TableGateway
     */
    public function __construct(
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
        TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway,
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
        TableGateways\{{ remote_constraint.getLocalClass }}TableGateway ${{ remote_constraint.getLocalVariable }}TableGateway,
{% endif %}
{% endfor %}
        TableGateways\{{ class_name }}TableGateway ${{ variable_name }}TableGateway
    ) {
{% for related_object in related_objects_shared|sort|unique %}
{% if related_object.getRemoteClass != class_name %}
        $this->{{ related_object.getRemoteVariable }}TableGateway = ${{ related_object.getRemoteVariable }}TableGateway;
{% endif %}
{% endfor %}
{% for remote_constraint in remote_constraints %}
{% if remote_contraint.getRemoteClass != class_name %}
    $this->{{ remote_constraint.getLocalVariable }}TableGateway = ${{ remote_constraint.getLocalVariable }}TableGateway;
{% endif %}
{% endfor %}
        $this->{{ variable_name }}TableGateway = ${{ variable_name }}TableGateway;
    }

    public function getNewTableGatewayInstance(): TableGateways\{{ class_name }}TableGateway
    {
        return $this->{{ variable_name }}TableGateway;
    }

    public function getNewModelInstance($dataExchange = []): Models\{{ class_name }}Model
    {
        return $this->{{ variable_name }}TableGateway->getNewModelInstance($dataExchange);
    }

    /**
     * @param null|int               $limit
     * @param null|int               $offset
     * @param null|array|\Closure[]  $wheres
     * @param null|Expression|string $order
     * @param null|string            $orderDirection
     *
     * @return Models\{{ class_name }}Model[]
     */
    public function getAll(
        int $limit = null,
        int $offset = null,
        array $wheres = null,
        $order = null,
        string $orderDirection = null
    ) {
        return parent::getAll(
            $limit,
            $offset,
            $wheres,
            $order,
            $orderDirection
        );
    }

{% for column in columns %}
{% if column.getFieldSanitised == 'id' %}
    /**
     * @param int $id
     *
     * @deprecated
     *
     * @return null|Models\{{ class_name }}Model
     */
    public function getById(int $id): ?Models\{{ class_name }}Model
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getById($id);
    }
{% endif %}
{% endfor %}

    /**
     * @param string $field Table column to filter by
     * @param mixed $value Data to filter by
     * @param null|string $orderBy Field to sort by
     * @param null|string $orderDirection Direction to sort (Select::ORDER_ASCENDING || Select::ORDER_DESCENDING)
     *
     * @return null|Models\{{ class_name }}Model
     */
    public function getByField(string $field, $value, $orderBy = null, $orderDirection = Select::ORDER_ASCENDING): ?Models\{{ class_name }}Model
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getByField($field, $value, $orderBy, $orderDirection);
    }

    /**
     * @param Where $where Laminas Where statement to use
     * @param null|int $limit
     * @param null|int $offset
     * @param null|string $orderBy Field to sort by
     * @param null|string $orderDirection Direction to sort (Select::ORDER_ASCENDING || Select::ORDER_DESCENDING)
     *
     * @return null|Models\{{ class_name }}Model[]
     */
    public function getManyByWhere(
        Where $where,
        int $limit = null,
        int $offset = null,
        $orderBy = null,
        $orderDirection = Select::ORDER_ASCENDING
    ): ?array
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getManyByWhere($where, $limit, $offset, $orderBy, $orderDirection);
    }

    /**
     * @param Where $where Laminas Where statement to use
     *
     * @return null|Models\{{ class_name }}Model
     */
    public function getByWhere(
        Where $where
    ): ?Models\{{ class_name }}Model
    {
        ${{ variable_name }}s = $this->getManyByWhere($where, 1);
        if(count(${{ variable_name }}s) == 0){
            return null;
        }
        return array_reset(${{ variable_name }}s);
    }

    /**
     * @param string $field Table column to filter by
     * @param mixed $value Data to filter by
     * @param null|int $limit
     * @param null|int $offset
     * @param null|string $orderBy Field to sort by
     * @param null|string $orderDirection Direction to sort (Select::ORDER_ASCENDING || Select::ORDER_DESCENDING)
     *
     * @return null|Models\{{ class_name }}Model[]
     */
    public function getManyByField(
        string $field,
        $value,
        int $limit = null,
        int $offset = null,
        $orderBy = null,
        $orderDirection = Select::ORDER_ASCENDING
    ): ?array
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getManyByField($field, $value, $limit, $offset, $orderBy, $orderDirection);
    }

    /**
     * @param string $field
     * @param mixed $value
     *
     * @return int
     */
    public function countByField(string $field, $value): int
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->countByField($field, $value);
    }

    /**
     * @param Where $where
     *
     * @return int
     */
    public function countByWhere(Where $where): int
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->countByWhere($where);
    }

    /**
     * @return Models\{{ class_name }}Model
     */
    public function getRandom(): ?Models\{{ class_name }}Model
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->fetchRandom();
    }

    /**
     * @param array|\Closure|Predicate\PredicateInterface|string|Where $keyValue
     * @param string $orderBy Field to sort by
     * @param string $orderDirection Direction to sort (Select::ORDER_ASCENDING || Select::ORDER_DESCENDING)
     *
     * @return Models\{{ class_name }}Model
     */
    public function getMatching($keyValue = [], $orderBy = null, $orderDirection = Select::ORDER_ASCENDING): ?Models\{{ class_name }}Model
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getMatching($keyValue, $orderBy, $orderDirection);
    }

    /**
     * @param array|\Closure|Predicate\PredicateInterface|string|Where $keyValue
     * @param string $orderBy Field to sort by
     * @param string $orderDirection Direction to sort (Select::ORDER_ASCENDING || Select::ORDER_DESCENDING)
     * @param int $limit Limit the number of matches returned
     *
     * @return Models\{{ class_name }}Model[]
     */
    public function getManyMatching($keyValue = [], $orderBy = null, $orderDirection = Select::ORDER_ASCENDING, int $limit = null): ?array
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->getManyMatching($keyValue, $orderBy, $orderDirection, $limit);
    }

    /**
     * @param array $dataExchange
     *
     * @return Models\{{ class_name }}Model
     */
    public function createFromArray(array $dataExchange): Models\{{ class_name }}Model
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();
        ${{ variable_name }} = $this->getNewModelInstance($dataExchange);

        return ${{ variable_name }}Table->save(${{ variable_name }});
    }

{% for column in columns %}
{% if column.getFieldSanitised == 'id' %}
    /**
     * @param int $id
     *
     * @deprecated
     *
     * @return int
     */
    public function deleteById($id): int
    {
        return $this->deleteByField('id', $id);
    }
{% endif %}
{% endfor %}

    /**
     * @param string $field
     * @param mixed $value
     *
     * @return int
     */
    public function deleteByField(string $field, $value): int
    {
        ${{ variable_name }}Table = $this->getNewTableGatewayInstance();

        return ${{ variable_name }}Table->delete([$field => $value]);
    }

    public function getTermPlural(): string
    {
        return '{{ object_name_plural }}';
    }

    public function getTermSingular(): string
    {
        return '{{ object_name_singular }}';
    }

    /**
     * Get a version of this object pre-populated with nonsense.
     *
     * @returns Models\{{ class_name }}Model
     */
    public function getMockObject(): Models\{{ class_name }}Model
    {
        return $this->getNewTableGatewayInstance()->getNewMockModelInstance();
    }
}
